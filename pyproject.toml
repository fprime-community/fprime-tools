
[tool.ruff]
# Configuration: https://beta.ruff.rs/docs/configuration/
# Rules: https://beta.ruff.rs/docs/rules/
target-version = "py38"  # Pin Ruff to Python 3.8
line-length = 88 # Same as black
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = [
    "docs/",
]
ignore = [
    # pycodestyle
    "E741",
    # flake8-builtins
    "A001",  # variable is shadowing a python builtin
    "A002",  # argument is shadowing a python builtin
    "A003",  # class attribute is shadowing a python builtin
    # flake8-annotations
    "ANN",
    # flake8-unused-arguments
    "ARG001",  #  unused function argument
    "ARG002",  #  unused method argument
    "ARG003",  #  unused class method argument
    "ARG004",  #  unused static method argument
    "ARG005",  #  unused lambda argument
    # flake8-bugbear
    "B006",  # do not use mutable data structures for argument default
    "B007",  # loop control variable `member_value` not used within loop body
    "B020",  # loop control variable `values` overrides iterable it iterates
    "B023",  # function definition does not bind loop variable
    "B026",  # keyword argument ... must come after starred arguments
    "B028",  # no explicit `stacklevel` keyword argument found
    # flake8-bugbear opinionated (disabled by default in flake8)
    "B904",  # within an except clause, raise exceptions with `raise ... from ...`
    # flake8-blind-except
    "BLE001",  # do not catch blind exception
    # mccabe
    "C901",  # ... is too complex

    "C417", # unnecessary `map` usage
    # flake8-commas
    "COM812", # trailing comma missing
    "COM819",  # trailing comma prohibited
    # pydocstyle
    "D",
    # flake8-django
    "DJ",  # Django is not used in Sphinx
    # flake8-datetimez
    "DTZ001",  # do not use `datetime.datetime()` without `tzinfo` argument
    "DTZ004",  # do not use `datetime.datetime.utcfromtimestamp()`
    "DTZ005",  # do not use `datetime.datetime.now()` without `tz` argument
    "DTZ006",  # do not use `datetime.datetime.fromtimestamp()` without `tz` argument

    "E501",    # line lenght
    # flake8-errmsg
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # exception must not use an f-string literal, assign to variable first
    # eradicate
    "ERA001",  # found commented-out code
    # flake8-executable
    "EXE001",  # shebang is present but file is not executable
    "EXE002",  # file executable but no shebang present
    "FA100",   # Missing `from __future__ import annotations`, but uses `typing.List` 
    # flake8-boolean-trap
    "FBT001",  # boolean positional arg in function definition
    "FBT002",  # boolean default value in function definition
    "FBT003",  # boolean positional value in function call
    "F821",    # undefined name
    # flake8-logging-format
    "G002",  # logging statement uses `%`
    "G003",  # logging statement uses `+`
    # flake8-implicit-str-concat
    "ISC001",  # implicitly concatenated string literals on one line
    "ISC002",  # implicitly concatenated string literals over multiple lines
    "ISC003",  # explicitly concatenated string should be implicitly concatenated
    # pep8-naming
    "N",
    # NumPy-specific rules
    "NPY",  # numpy is not used in Sphinx
    # pandas-vet
    "PD",  # pandas is not used in Sphinx
    # pygrep-hooks
    "PGH003",
    # flake8-pie
    "PIE790",   # unnecessary 'pass' statement
    # pylint
    "PLC1901",  # simplify truthy/falsey string comparisons
    "PLR2004",  # avoid magic values
    "PLR0911",  # too many return statements
    "PLR0912",  # too many branches
    "PLR0913",  # too many arguments to function call
    "PLR0915",  # too many statements
    "PLR5501",  # consider using elif to remove an indentation level
    "PLW0603",  # using the global statement to update variables is discouraged
    "PLW2901",  # outer loop variable overwritten by inner assignment
    # flake8-pytest-style
    "PT003",  # `scope='function'` is implied in `@pytest.fixture()`
    "PT006",  # wrong name type in `@pytest.mark.parametrize`,
    "PT007",  # wrong values type in `@pytest.mark.parametrize`
    "PT011",  # `pytest.raises(ValueError)` is too broad, set the `match` parameter
    # flake8-use-pathlib
    "PTH",
    # flake8-quotes
    "Q000",  # double quotes found but single quotes preferred
    "Q001",  # single quote docstring found but double quotes preferred
    # flake8-return
    "RET501",  # Dd not explicitly `return None` in function if it is the only possible return value
    "RET504",  # unnecessary variable assignment before `return` statement
    "RET505",  # unnecessary `else` after `return` statement
    # flake8-raise
    "RSE102",
    # Ruff-specific rules
    "RUF001",  # string contains ambiguous unicode character
    "RUF002",  # Docstring contains ambiguous unicode character `Â´` (did you mean ```?)
    "RUF003",  # comment contains ambiguous unicode character
    "RUF005",  # consider unpacking instead of concatenation
    "RUF010",  # Use conversion in f-string
    # flake8-bandit
    "S101",  # assert used
    "S105",  # possible hardcoded password
    "S110",  # try/except/pass detected
    "S113",  # probable use of requests call without timeout
    "S301",  # 'pickle' unsafe when loading untrusted data
    "S324",  # probable use of insecure hash functions
    "S603",  # `subprocess` call: check for execution of untrusted input
    "S701",  # use autoescape=True for Jinja
    # flake8-simplify
    "SIM102", # nested 'if' statements
    "SIM103", # return condition directly
    "SIM105", # use contextlib.suppress
    "SIM108", # use ternary operator
    "SIM114", # combine `if` branches using logical `or` operator
    "SIM115", # use context handler for opening files
    "SIM117", # use single 'with' statement
    "SIM118", # use `member in enum_dict` instead of `member in enum_dict.keys()`
    # flake8-self
    "SLF001",  # private member accessed
    # flake8-print
    "T201",  # print found
    # flake8-type-checking
    "TCH001", # move application import into a type-checking block
    "TCH002", # move third-party import into a type-checking block
    # tryceratops
    "TRY",
    # pyupgrade
    "UP015", # unnecessary open mode parameters
    "UP024", # replace aliased errors with `OSError`
    "UP031", # replace with format specifiers
    "UP032", # Use f-string instead of `format` call

    "W", "I",
]
select = [
    "ALL",  # every check supported by Ruff
]

[tool.ruff.per-file-ignores]
"src/fprime/fbuild/builder.py" = ["F401"]
"test/fprime/fbuild/test_settings.py" = ["INP001"]
"test/fprime/common/models/serialize/time_type_unit_test.py" = ["INP001"]
"test/fprime/fbuild/test_build.py" = ["INP001"]
"test/**/*test*.py" = ["INP001", "UP008", "PT012"]
"src/fprime/cookiecutter_templates/cookiecutter-fprime-*/hooks/*" = ["INP001", "S607", "PLR0133"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
